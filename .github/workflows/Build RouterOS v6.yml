name: Build RouterOS v6

on:
 # schedule:
  #  - cron: '0 */24 * * *'
  workflow_dispatch:
permissions:
  contents: write

env:
  MIKRO_NPK_SIGN_PUBLIC_KEY: ${{ secrets.MIKRO_NPK_SIGN_PUBLIC_KEY }}
  MIKRO_LICENSE_PUBLIC_KEY: ${{ secrets.MIKRO_LICENSE_PUBLIC_KEY }}
  CUSTOM_NPK_SIGN_PRIVATE_KEY: ${{ secrets.CUSTOM_NPK_SIGN_PRIVATE_KEY }}
  CUSTOM_NPK_SIGN_PUBLIC_KEY: ${{ secrets.CUSTOM_NPK_SIGN_PUBLIC_KEY }}
  CUSTOM_LICENSE_PRIVATE_KEY: ${{ secrets.CUSTOM_LICENSE_PRIVATE_KEY }}
  CUSTOM_LICENSE_PUBLIC_KEY: ${{ secrets.CUSTOM_LICENSE_PUBLIC_KEY }}
  
jobs:
  Build_ROS_v6:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Check latest version
      id: get_latest
      run: |
        echo $(uname -a)
        NEWEST=$(curl -s https://upgrade.mikrotik.com/routeros/NEWEST6.stable)
        LATEST_VERSION=$(echo "$NEWEST" | cut -d' ' -f1)
        BUILD_TIME=$(echo "$NEWEST" | cut -d' ' -f2)
        echo Latest Version: $LATEST_VERSION
        echo Build Time: $BUILD_TIME
        _LATEST_VERSION=$(cat latest6.txt | cut -d ' ' -f1)
        if [ "$_LATEST_VERSION" == "$LATEST_VERSION" ]; then
          echo "No new version found"
          echo "has_new_version=false" >> $GITHUB_OUTPUT
          exit 0
        fi
        echo "has_new_version=true" >> $GITHUB_OUTPUT
        curl -s -o CHANGELOG https://upgrade.mikrotik.com/routeros/$LATEST_VERSION/CHANGELOG
        cat CHANGELOG
        echo "NEWEST=${NEWEST}" >> $GITHUB_ENV
        echo "LATEST_VERSION=${LATEST_VERSION}" >> $GITHUB_ENV
        sudo apt-get update > /dev/null

    - name: Cache mikrotik-${{ env.LATEST_VERSION }}.iso
      if: steps.get_latest.outputs.has_new_version == 'true'
      id: cache_mikrotik
      uses: actions/cache@v4
      with:
        path: mikrotik.iso
        key: mikrotik-${{ env.LATEST_VERSION }}-x86

    - name: Get mikrotik-${{ env.LATEST_VERSION }}.iso
      if: steps.get_latest.outputs.has_new_version == 'true' && steps.cache_mikrotik.outputs.cache-hit != 'true'
      run: |
        sudo curl -s -o mikrotik.iso https://download.mikrotik.com/routeros/$LATEST_VERSION/mikrotik-$LATEST_VERSION.iso

    - name: Patch mikrotik-${{ env.LATEST_VERSION }}.iso
      if: steps.get_latest.outputs.has_new_version == 'true'
      run: |
        sudo apt-get install -y mkisofs xorriso --no-install-recommends > /dev/null
        sudo mkdir iso
        sudo mount -o loop,ro mikrotik.iso iso/
        sudo mkdir new_iso/
        sudo cp -r iso/* new_iso/
        sudo rsync -a iso/ new_iso/
        sudo umount iso/
        sudo rm -rf iso/
        sudo -E python3 patch.py kernel new_iso/isolinux/initrd.rgz
        NPK_FILES=$(find new_iso/*.npk)
        for file in $NPK_FILES; do
          sudo -E python3 patch.py npk $file
        done
        sudo mkisofs -o mikrotik-$LATEST_VERSION-OEM.iso \
                     -V "MikroTik $LATEST_VERSION" \
                     -sysid "" -preparer "MiKroTiK" \
                     -publisher "" -A "MiKroTiK RouterOS" \
                     -input-charset utf-8 \
                     -b isolinux/isolinux.bin \
                     -c isolinux/boot.cat \
                     -no-emul-boot \
                     -boot-load-size 4 \
                     -boot-info-table \
                     -R -J \
                     new_iso/
        sudo mkdir all_packages
        sudo cp new_iso/*.npk all_packages/
        sudo rm -rf new_iso/
        cd all_packages/
        sudo zip ../all_packages-x86-$LATEST_VERSION-OEM.zip *.npk
        cd ../

    - name: Cache install-image-${{ env.LATEST_VERSION }}.zip
      if: steps.get_latest.outputs.has_new_version == 'true'
      id: cache_install_image
      uses: actions/cache@v4
      with:
        path: install-image.zip
        key: install-image-${{ env.LATEST_VERSION }}-x86

    - name: Get install-image-${{ env.LATEST_VERSION }}.zip
      if: steps.get_latest.outputs.has_new_version == 'true' && steps.cache_install_image.outputs.cache-hit != 'true'
      run: |
        sudo curl -s -o install-image.zip https://download.mikrotik.com/routeros/$LATEST_VERSION/install-image-$LATEST_VERSION.zip

    - name: Patch install-image-${{ env.LATEST_VERSION }}.img
      if: steps.get_latest.outputs.has_new_version == 'true'
      run: |
        sudo apt-get install -y qemu-utils extlinux --no-install-recommends > /dev/null
        sudo unzip install-image.zip
        sudo modprobe nbd
        sudo qemu-nbd -c /dev/nbd0 -f raw install-image-$LATEST_VERSION.img
        sudo mkdir install-image
        sudo mount /dev/nbd0 install-image/
        sudo -E python3 patch.py kernel install-image/initrd.rgz
        NPK_FILES=$(find install-image/*.npk)
        for file in $NPK_FILES; do
          sudo -E python3 patch.py npk $file
        done
        sudo umount /dev/nbd0
        sudo qemu-nbd -d /dev/nbd0
        sudo rm -rf install-image/
        sudo mv install-image-$LATEST_VERSION.img install-image-$LATEST_VERSION-OEM.img
        sudo zip install-image-$LATEST_VERSION-OEM.img.zip install-image-$LATEST_VERSION-OEM.img
        sudo rm install-image-$LATEST_VERSION-OEM.img
        
    - name: Cache chr-${{ env.LATEST_VERSION }}.zip
      if: steps.get_latest.outputs.has_new_version == 'true'
      id: cache_chr_img
      uses: actions/cache@v4
      with:
        path: chr.img.zip
        key: chr-${{ env.LATEST_VERSION }}-x86

    - name: Get chr-${{ env.LATEST_VERSION }}.zip
      if: steps.get_latest.outputs.has_new_version == 'true' && steps.cache_chr_img.outputs.cache-hit != 'true'
      run: |
          sudo curl -s -o chr.img.zip https://download.mikrotik.com/routeros/$LATEST_VERSION/chr-$LATEST_VERSION.img.zip

    - name: Patch chr-${{ env.LATEST_VERSION }}.img
      if: steps.get_latest.outputs.has_new_version == 'true'
      run: |
        sudo apt-get install -y qemu-utils extlinux --no-install-recommends > /dev/null
        sudo unzip chr.img.zip
        sudo modprobe nbd
        sudo qemu-nbd -c /dev/nbd0 -f raw chr-$LATEST_VERSION.img
        sudo mkdir -p chr/{boot,routeros}
        sudo -E python3 patch.py block /dev/nbd0p1 boot/initrd.rgz
        sudo mount /dev/nbd0p1 chr/
        sudo -E python3 patch.py npk chr/var/pdb/routeros-x86/image
        sudo cp chr/var/pdb/routeros-x86/image all_packages/routeros-x86-$LATEST_VERSION.npk
        sudo cp all_packages/routeros-x86-$LATEST_VERSION.npk routeros-x86-$LATEST_VERSION-OEM.npk
        sudo umount chr/
        sudo qemu-nbd -d /dev/nbd0
        sudo rm -rf chr/
        
    - name: Update latest version
      if: steps.get_latest.outputs.has_new_version == 'true'
      run: |
        echo $NEWEST > latest6.txt
        git config user.name "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git add latest6.txt
        git commit -m "Update latest version"
        git push

    - name: Create Release tag ${{ env.LATEST_VERSION }}
      if: steps.get_latest.outputs.has_new_version == 'true'
      uses: softprops/action-gh-release@v2
      with:
        name: "RouterOS ${{ env.LATEST_VERSION }}"
        body_path: "CHANGELOG"
        tag_name: ${{ env.LATEST_VERSION }}
        make_latest: false
        files: |
          mikrotik-${{ env.LATEST_VERSION }}-OEM.iso
          install-image-${{ env.LATEST_VERSION }}-OEM.*.zip
          routeros-x86-${{ env.LATEST_VERSION }}-OEM.npk
          all_packages-x86-${{ env.LATEST_VERSION }}-OEM.zip
